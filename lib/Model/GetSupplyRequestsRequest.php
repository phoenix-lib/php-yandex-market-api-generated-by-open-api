<?php
/**
 * GetSupplyRequestsRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Яндекс Маркета для продавцов
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetSupplyRequestsRequest Class Doc Comment
 *
 * @category Class
 * @description Модель для фильтрации и сортировки заявок на поставку. Фильтры по &#x60;requestDateFrom&#x60; и &#x60;requestDateTo&#x60; отбирают заявки по targetLocation-&gt;requestedDate и transitLocation-&gt;requestedDate.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetSupplyRequestsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetSupplyRequestsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_ids' => 'int[]',
        'request_date_from' => '\DateTime',
        'request_date_to' => '\DateTime',
        'request_types' => '\OpenAPI\Client\Model\SupplyRequestType[]',
        'request_subtypes' => '\OpenAPI\Client\Model\SupplyRequestSubType[]',
        'request_statuses' => '\OpenAPI\Client\Model\SupplyRequestStatusType[]',
        'sorting' => '\OpenAPI\Client\Model\SupplyRequestSortingDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_ids' => 'int64',
        'request_date_from' => 'date-time',
        'request_date_to' => 'date-time',
        'request_types' => null,
        'request_subtypes' => null,
        'request_statuses' => null,
        'sorting' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_ids' => true,
        'request_date_from' => true,
        'request_date_to' => true,
        'request_types' => true,
        'request_subtypes' => true,
        'request_statuses' => true,
        'sorting' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_ids' => 'requestIds',
        'request_date_from' => 'requestDateFrom',
        'request_date_to' => 'requestDateTo',
        'request_types' => 'requestTypes',
        'request_subtypes' => 'requestSubtypes',
        'request_statuses' => 'requestStatuses',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_ids' => 'setRequestIds',
        'request_date_from' => 'setRequestDateFrom',
        'request_date_to' => 'setRequestDateTo',
        'request_types' => 'setRequestTypes',
        'request_subtypes' => 'setRequestSubtypes',
        'request_statuses' => 'setRequestStatuses',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_ids' => 'getRequestIds',
        'request_date_from' => 'getRequestDateFrom',
        'request_date_to' => 'getRequestDateTo',
        'request_types' => 'getRequestTypes',
        'request_subtypes' => 'getRequestSubtypes',
        'request_statuses' => 'getRequestStatuses',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('request_ids', $data ?? [], null);
        $this->setIfExists('request_date_from', $data ?? [], null);
        $this->setIfExists('request_date_to', $data ?? [], null);
        $this->setIfExists('request_types', $data ?? [], null);
        $this->setIfExists('request_subtypes', $data ?? [], null);
        $this->setIfExists('request_statuses', $data ?? [], null);
        $this->setIfExists('sorting', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['request_ids']) && (count($this->container['request_ids']) > 100)) {
            $invalidProperties[] = "invalid value for 'request_ids', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['request_ids']) && (count($this->container['request_ids']) < 1)) {
            $invalidProperties[] = "invalid value for 'request_ids', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['request_types']) && (count($this->container['request_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'request_types', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['request_subtypes']) && (count($this->container['request_subtypes']) < 1)) {
            $invalidProperties[] = "invalid value for 'request_subtypes', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['request_statuses']) && (count($this->container['request_statuses']) < 1)) {
            $invalidProperties[] = "invalid value for 'request_statuses', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_ids
     *
     * @return int[]|null
     */
    public function getRequestIds()
    {
        return $this->container['request_ids'];
    }

    /**
     * Sets request_ids
     *
     * @param int[]|null $request_ids Идентификаторы заявок.
     *
     * @return self
     */
    public function setRequestIds($request_ids)
    {
        if (is_null($request_ids)) {
            array_push($this->openAPINullablesSetToNull, 'request_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($request_ids) && (count($request_ids) > 100)) {
            throw new \InvalidArgumentException('invalid value for $request_ids when calling GetSupplyRequestsRequest., number of items must be less than or equal to 100.');
        }
        if (!is_null($request_ids) && (count($request_ids) < 1)) {
            throw new \InvalidArgumentException('invalid length for $request_ids when calling GetSupplyRequestsRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['request_ids'] = $request_ids;

        return $this;
    }

    /**
     * Gets request_date_from
     *
     * @return \DateTime|null
     */
    public function getRequestDateFrom()
    {
        return $this->container['request_date_from'];
    }

    /**
     * Sets request_date_from
     *
     * @param \DateTime|null $request_date_from Дата начала периода для фильтрации заявок.
     *
     * @return self
     */
    public function setRequestDateFrom($request_date_from)
    {
        if (is_null($request_date_from)) {
            array_push($this->openAPINullablesSetToNull, 'request_date_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_date_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['request_date_from'] = $request_date_from;

        return $this;
    }

    /**
     * Gets request_date_to
     *
     * @return \DateTime|null
     */
    public function getRequestDateTo()
    {
        return $this->container['request_date_to'];
    }

    /**
     * Sets request_date_to
     *
     * @param \DateTime|null $request_date_to Дата окончания периода для фильтрации заявок.
     *
     * @return self
     */
    public function setRequestDateTo($request_date_to)
    {
        if (is_null($request_date_to)) {
            array_push($this->openAPINullablesSetToNull, 'request_date_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_date_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['request_date_to'] = $request_date_to;

        return $this;
    }

    /**
     * Gets request_types
     *
     * @return \OpenAPI\Client\Model\SupplyRequestType[]|null
     */
    public function getRequestTypes()
    {
        return $this->container['request_types'];
    }

    /**
     * Sets request_types
     *
     * @param \OpenAPI\Client\Model\SupplyRequestType[]|null $request_types Типы заявок для фильтрации.
     *
     * @return self
     */
    public function setRequestTypes($request_types)
    {
        if (is_null($request_types)) {
            array_push($this->openAPINullablesSetToNull, 'request_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($request_types) && (count($request_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $request_types when calling GetSupplyRequestsRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['request_types'] = $request_types;

        return $this;
    }

    /**
     * Gets request_subtypes
     *
     * @return \OpenAPI\Client\Model\SupplyRequestSubType[]|null
     */
    public function getRequestSubtypes()
    {
        return $this->container['request_subtypes'];
    }

    /**
     * Sets request_subtypes
     *
     * @param \OpenAPI\Client\Model\SupplyRequestSubType[]|null $request_subtypes Подтипы заявок для фильтрации.
     *
     * @return self
     */
    public function setRequestSubtypes($request_subtypes)
    {
        if (is_null($request_subtypes)) {
            array_push($this->openAPINullablesSetToNull, 'request_subtypes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_subtypes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($request_subtypes) && (count($request_subtypes) < 1)) {
            throw new \InvalidArgumentException('invalid length for $request_subtypes when calling GetSupplyRequestsRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['request_subtypes'] = $request_subtypes;

        return $this;
    }

    /**
     * Gets request_statuses
     *
     * @return \OpenAPI\Client\Model\SupplyRequestStatusType[]|null
     */
    public function getRequestStatuses()
    {
        return $this->container['request_statuses'];
    }

    /**
     * Sets request_statuses
     *
     * @param \OpenAPI\Client\Model\SupplyRequestStatusType[]|null $request_statuses Статусы заявок для фильтрации.
     *
     * @return self
     */
    public function setRequestStatuses($request_statuses)
    {
        if (is_null($request_statuses)) {
            array_push($this->openAPINullablesSetToNull, 'request_statuses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_statuses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($request_statuses) && (count($request_statuses) < 1)) {
            throw new \InvalidArgumentException('invalid length for $request_statuses when calling GetSupplyRequestsRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['request_statuses'] = $request_statuses;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \OpenAPI\Client\Model\SupplyRequestSortingDTO|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \OpenAPI\Client\Model\SupplyRequestSortingDTO|null $sorting sorting
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        if (is_null($sorting)) {
            throw new \InvalidArgumentException('non-nullable sorting cannot be null');
        }
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


