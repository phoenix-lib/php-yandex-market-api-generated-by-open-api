<?php
/**
 * SupplyRequestDTO
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Яндекс Маркета для продавцов
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SupplyRequestDTO Class Doc Comment
 *
 * @category Class
 * @description Информация о заявке на поставку, вывоз или утилизацию.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupplyRequestDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupplyRequestDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\OpenAPI\Client\Model\SupplyRequestIdDTO',
        'type' => '\OpenAPI\Client\Model\SupplyRequestType',
        'subtype' => '\OpenAPI\Client\Model\SupplyRequestSubType',
        'status' => '\OpenAPI\Client\Model\SupplyRequestStatusType',
        'updated_at' => '\DateTime',
        'counters' => '\OpenAPI\Client\Model\SupplyRequestCountersDTO',
        'parent_link' => '\OpenAPI\Client\Model\SupplyRequestReferenceDTO',
        'children_links' => '\OpenAPI\Client\Model\SupplyRequestReferenceDTO[]',
        'target_location' => '\OpenAPI\Client\Model\SupplyRequestLocationDTO',
        'transit_location' => '\OpenAPI\Client\Model\SupplyRequestLocationDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'subtype' => null,
        'status' => null,
        'updated_at' => 'date-time',
        'counters' => null,
        'parent_link' => null,
        'children_links' => null,
        'target_location' => null,
        'transit_location' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'subtype' => false,
        'status' => false,
        'updated_at' => false,
        'counters' => false,
        'parent_link' => false,
        'children_links' => true,
        'target_location' => false,
        'transit_location' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'subtype' => 'subtype',
        'status' => 'status',
        'updated_at' => 'updatedAt',
        'counters' => 'counters',
        'parent_link' => 'parentLink',
        'children_links' => 'childrenLinks',
        'target_location' => 'targetLocation',
        'transit_location' => 'transitLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'subtype' => 'setSubtype',
        'status' => 'setStatus',
        'updated_at' => 'setUpdatedAt',
        'counters' => 'setCounters',
        'parent_link' => 'setParentLink',
        'children_links' => 'setChildrenLinks',
        'target_location' => 'setTargetLocation',
        'transit_location' => 'setTransitLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'subtype' => 'getSubtype',
        'status' => 'getStatus',
        'updated_at' => 'getUpdatedAt',
        'counters' => 'getCounters',
        'parent_link' => 'getParentLink',
        'children_links' => 'getChildrenLinks',
        'target_location' => 'getTargetLocation',
        'transit_location' => 'getTransitLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('counters', $data ?? [], null);
        $this->setIfExists('parent_link', $data ?? [], null);
        $this->setIfExists('children_links', $data ?? [], null);
        $this->setIfExists('target_location', $data ?? [], null);
        $this->setIfExists('transit_location', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['subtype'] === null) {
            $invalidProperties[] = "'subtype' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['counters'] === null) {
            $invalidProperties[] = "'counters' can't be null";
        }
        if (!is_null($this->container['children_links']) && (count($this->container['children_links']) < 1)) {
            $invalidProperties[] = "invalid value for 'children_links', number of items must be greater than or equal to 1.";
        }

        if ($this->container['target_location'] === null) {
            $invalidProperties[] = "'target_location' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \OpenAPI\Client\Model\SupplyRequestIdDTO
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \OpenAPI\Client\Model\SupplyRequestIdDTO $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\SupplyRequestType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\SupplyRequestType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return \OpenAPI\Client\Model\SupplyRequestSubType
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param \OpenAPI\Client\Model\SupplyRequestSubType $subtype subtype
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            throw new \InvalidArgumentException('non-nullable subtype cannot be null');
        }
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\SupplyRequestStatusType
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\SupplyRequestStatusType $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Дата и время последнего обновления заявки.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets counters
     *
     * @return \OpenAPI\Client\Model\SupplyRequestCountersDTO
     */
    public function getCounters()
    {
        return $this->container['counters'];
    }

    /**
     * Sets counters
     *
     * @param \OpenAPI\Client\Model\SupplyRequestCountersDTO $counters counters
     *
     * @return self
     */
    public function setCounters($counters)
    {
        if (is_null($counters)) {
            throw new \InvalidArgumentException('non-nullable counters cannot be null');
        }
        $this->container['counters'] = $counters;

        return $this;
    }

    /**
     * Gets parent_link
     *
     * @return \OpenAPI\Client\Model\SupplyRequestReferenceDTO|null
     */
    public function getParentLink()
    {
        return $this->container['parent_link'];
    }

    /**
     * Sets parent_link
     *
     * @param \OpenAPI\Client\Model\SupplyRequestReferenceDTO|null $parent_link parent_link
     *
     * @return self
     */
    public function setParentLink($parent_link)
    {
        if (is_null($parent_link)) {
            throw new \InvalidArgumentException('non-nullable parent_link cannot be null');
        }
        $this->container['parent_link'] = $parent_link;

        return $this;
    }

    /**
     * Gets children_links
     *
     * @return \OpenAPI\Client\Model\SupplyRequestReferenceDTO[]|null
     */
    public function getChildrenLinks()
    {
        return $this->container['children_links'];
    }

    /**
     * Sets children_links
     *
     * @param \OpenAPI\Client\Model\SupplyRequestReferenceDTO[]|null $children_links Ссылки на дочерние заявки.
     *
     * @return self
     */
    public function setChildrenLinks($children_links)
    {
        if (is_null($children_links)) {
            array_push($this->openAPINullablesSetToNull, 'children_links');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('children_links', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($children_links) && (count($children_links) < 1)) {
            throw new \InvalidArgumentException('invalid length for $children_links when calling SupplyRequestDTO., number of items must be greater than or equal to 1.');
        }
        $this->container['children_links'] = $children_links;

        return $this;
    }

    /**
     * Gets target_location
     *
     * @return \OpenAPI\Client\Model\SupplyRequestLocationDTO
     */
    public function getTargetLocation()
    {
        return $this->container['target_location'];
    }

    /**
     * Sets target_location
     *
     * @param \OpenAPI\Client\Model\SupplyRequestLocationDTO $target_location target_location
     *
     * @return self
     */
    public function setTargetLocation($target_location)
    {
        if (is_null($target_location)) {
            throw new \InvalidArgumentException('non-nullable target_location cannot be null');
        }
        $this->container['target_location'] = $target_location;

        return $this;
    }

    /**
     * Gets transit_location
     *
     * @return \OpenAPI\Client\Model\SupplyRequestLocationDTO|null
     */
    public function getTransitLocation()
    {
        return $this->container['transit_location'];
    }

    /**
     * Sets transit_location
     *
     * @param \OpenAPI\Client\Model\SupplyRequestLocationDTO|null $transit_location transit_location
     *
     * @return self
     */
    public function setTransitLocation($transit_location)
    {
        if (is_null($transit_location)) {
            throw new \InvalidArgumentException('non-nullable transit_location cannot be null');
        }
        $this->container['transit_location'] = $transit_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


