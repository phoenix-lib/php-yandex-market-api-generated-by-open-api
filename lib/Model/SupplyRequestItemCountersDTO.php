<?php
/**
 * SupplyRequestItemCountersDTO
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Яндекс Маркета для продавцов
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SupplyRequestItemCountersDTO Class Doc Comment
 *
 * @category Class
 * @description Количество товаров в заявке.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupplyRequestItemCountersDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupplyRequestItemCountersDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'plan_count' => 'int',
        'fact_count' => 'int',
        'surplus_count' => 'int',
        'shortage_count' => 'int',
        'defect_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'plan_count' => 'int32',
        'fact_count' => 'int32',
        'surplus_count' => 'int32',
        'shortage_count' => 'int32',
        'defect_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'plan_count' => false,
        'fact_count' => false,
        'surplus_count' => false,
        'shortage_count' => false,
        'defect_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan_count' => 'planCount',
        'fact_count' => 'factCount',
        'surplus_count' => 'surplusCount',
        'shortage_count' => 'shortageCount',
        'defect_count' => 'defectCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan_count' => 'setPlanCount',
        'fact_count' => 'setFactCount',
        'surplus_count' => 'setSurplusCount',
        'shortage_count' => 'setShortageCount',
        'defect_count' => 'setDefectCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan_count' => 'getPlanCount',
        'fact_count' => 'getFactCount',
        'surplus_count' => 'getSurplusCount',
        'shortage_count' => 'getShortageCount',
        'defect_count' => 'getDefectCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('plan_count', $data ?? [], null);
        $this->setIfExists('fact_count', $data ?? [], null);
        $this->setIfExists('surplus_count', $data ?? [], null);
        $this->setIfExists('shortage_count', $data ?? [], null);
        $this->setIfExists('defect_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['plan_count']) && ($this->container['plan_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'plan_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fact_count']) && ($this->container['fact_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'fact_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['surplus_count']) && ($this->container['surplus_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'surplus_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shortage_count']) && ($this->container['shortage_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'shortage_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['defect_count']) && ($this->container['defect_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'defect_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plan_count
     *
     * @return int|null
     */
    public function getPlanCount()
    {
        return $this->container['plan_count'];
    }

    /**
     * Sets plan_count
     *
     * @param int|null $plan_count Количество товаров в заявке на поставку.
     *
     * @return self
     */
    public function setPlanCount($plan_count)
    {
        if (is_null($plan_count)) {
            throw new \InvalidArgumentException('non-nullable plan_count cannot be null');
        }

        if (($plan_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $plan_count when calling SupplyRequestItemCountersDTO., must be bigger than or equal to 0.');
        }

        $this->container['plan_count'] = $plan_count;

        return $this;
    }

    /**
     * Gets fact_count
     *
     * @return int|null
     */
    public function getFactCount()
    {
        return $this->container['fact_count'];
    }

    /**
     * Sets fact_count
     *
     * @param int|null $fact_count Количество товаров, которые приняты на складе.
     *
     * @return self
     */
    public function setFactCount($fact_count)
    {
        if (is_null($fact_count)) {
            throw new \InvalidArgumentException('non-nullable fact_count cannot be null');
        }

        if (($fact_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $fact_count when calling SupplyRequestItemCountersDTO., must be bigger than or equal to 0.');
        }

        $this->container['fact_count'] = $fact_count;

        return $this;
    }

    /**
     * Gets surplus_count
     *
     * @return int|null
     */
    public function getSurplusCount()
    {
        return $this->container['surplus_count'];
    }

    /**
     * Sets surplus_count
     *
     * @param int|null $surplus_count Количество лишних товаров.
     *
     * @return self
     */
    public function setSurplusCount($surplus_count)
    {
        if (is_null($surplus_count)) {
            throw new \InvalidArgumentException('non-nullable surplus_count cannot be null');
        }

        if (($surplus_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $surplus_count when calling SupplyRequestItemCountersDTO., must be bigger than or equal to 0.');
        }

        $this->container['surplus_count'] = $surplus_count;

        return $this;
    }

    /**
     * Gets shortage_count
     *
     * @return int|null
     */
    public function getShortageCount()
    {
        return $this->container['shortage_count'];
    }

    /**
     * Sets shortage_count
     *
     * @param int|null $shortage_count Количество товаров с недостатками.
     *
     * @return self
     */
    public function setShortageCount($shortage_count)
    {
        if (is_null($shortage_count)) {
            throw new \InvalidArgumentException('non-nullable shortage_count cannot be null');
        }

        if (($shortage_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $shortage_count when calling SupplyRequestItemCountersDTO., must be bigger than or equal to 0.');
        }

        $this->container['shortage_count'] = $shortage_count;

        return $this;
    }

    /**
     * Gets defect_count
     *
     * @return int|null
     */
    public function getDefectCount()
    {
        return $this->container['defect_count'];
    }

    /**
     * Sets defect_count
     *
     * @param int|null $defect_count Количество товаров с браком.
     *
     * @return self
     */
    public function setDefectCount($defect_count)
    {
        if (is_null($defect_count)) {
            throw new \InvalidArgumentException('non-nullable defect_count cannot be null');
        }

        if (($defect_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $defect_count when calling SupplyRequestItemCountersDTO., must be bigger than or equal to 0.');
        }

        $this->container['defect_count'] = $defect_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


