<?php
/**
 * GetWarehouseStocksRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Яндекс Маркета для продавцов
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetWarehouseStocksRequest Class Doc Comment
 *
 * @category Class
 * @description Фильтры для запроса остатков.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetWarehouseStocksRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetWarehouseStocksRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stocks_warehouse_id' => 'int',
        'has_stocks' => 'bool',
        'with_turnover' => 'bool',
        'archived' => 'bool',
        'offer_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stocks_warehouse_id' => 'int64',
        'has_stocks' => null,
        'with_turnover' => null,
        'archived' => null,
        'offer_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'stocks_warehouse_id' => false,
        'has_stocks' => false,
        'with_turnover' => false,
        'archived' => false,
        'offer_ids' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stocks_warehouse_id' => 'stocksWarehouseId',
        'has_stocks' => 'hasStocks',
        'with_turnover' => 'withTurnover',
        'archived' => 'archived',
        'offer_ids' => 'offerIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stocks_warehouse_id' => 'setStocksWarehouseId',
        'has_stocks' => 'setHasStocks',
        'with_turnover' => 'setWithTurnover',
        'archived' => 'setArchived',
        'offer_ids' => 'setOfferIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stocks_warehouse_id' => 'getStocksWarehouseId',
        'has_stocks' => 'getHasStocks',
        'with_turnover' => 'getWithTurnover',
        'archived' => 'getArchived',
        'offer_ids' => 'getOfferIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('stocks_warehouse_id', $data ?? [], null);
        $this->setIfExists('has_stocks', $data ?? [], null);
        $this->setIfExists('with_turnover', $data ?? [], false);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('offer_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['stocks_warehouse_id']) && ($this->container['stocks_warehouse_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'stocks_warehouse_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['offer_ids']) && (count($this->container['offer_ids']) > 500)) {
            $invalidProperties[] = "invalid value for 'offer_ids', number of items must be less than or equal to 500.";
        }

        if (!is_null($this->container['offer_ids']) && (count($this->container['offer_ids']) < 1)) {
            $invalidProperties[] = "invalid value for 'offer_ids', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stocks_warehouse_id
     *
     * @return int|null
     */
    public function getStocksWarehouseId()
    {
        return $this->container['stocks_warehouse_id'];
    }

    /**
     * Sets stocks_warehouse_id
     *
     * @param int|null $stocks_warehouse_id Идентификатор склада.  Если параметр указан, возвращаются только товары на переданном складе.  **Для модели :no-translate[FBY]:** получить список складов Маркета можно с помощью метода [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
     *
     * @return self
     */
    public function setStocksWarehouseId($stocks_warehouse_id)
    {
        if (is_null($stocks_warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable stocks_warehouse_id cannot be null');
        }

        if (($stocks_warehouse_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $stocks_warehouse_id when calling GetWarehouseStocksRequest., must be bigger than or equal to 1.');
        }

        $this->container['stocks_warehouse_id'] = $stocks_warehouse_id;

        return $this;
    }

    /**
     * Gets has_stocks
     *
     * @return bool|null
     */
    public function getHasStocks()
    {
        return $this->container['has_stocks'];
    }

    /**
     * Sets has_stocks
     *
     * @param bool|null $has_stocks Фильтр по наличию товаров. Используйте только вместе со `stocksWarehouseId`.  Передайте `false`, чтобы получить информацию о товарах, которых нет в наличие. При значении `true` возвращаются данные о товарах, которые есть на указанном складе.
     *
     * @return self
     */
    public function setHasStocks($has_stocks)
    {
        if (is_null($has_stocks)) {
            throw new \InvalidArgumentException('non-nullable has_stocks cannot be null');
        }
        $this->container['has_stocks'] = $has_stocks;

        return $this;
    }

    /**
     * Gets with_turnover
     *
     * @return bool|null
     */
    public function getWithTurnover()
    {
        return $this->container['with_turnover'];
    }

    /**
     * Sets with_turnover
     *
     * @param bool|null $with_turnover **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию: `false`. Если информация нужна, передайте значение `true`.
     *
     * @return self
     */
    public function setWithTurnover($with_turnover)
    {
        if (is_null($with_turnover)) {
            throw new \InvalidArgumentException('non-nullable with_turnover cannot be null');
        }
        $this->container['with_turnover'] = $with_turnover;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращается информация о товарах, которые не находятся в архиве.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets offer_ids
     *
     * @return string[]|null
     */
    public function getOfferIds()
    {
        return $this->container['offer_ids'];
    }

    /**
     * Sets offer_ids
     *
     * @param string[]|null $offer_ids Фильтр по вашим :no-translate[SKU] товаров.  Возвращается информация об остатках всех переданных :no-translate[SKU], включая товары в архиве.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным :no-translate[SKU], не заполняйте:  * `page_token` * `limit` * `archived` * `stocksOnWarehouse`  {% endnote %}   
     *
     * @return self
     */
    public function setOfferIds($offer_ids)
    {
        if (is_null($offer_ids)) {
            array_push($this->openAPINullablesSetToNull, 'offer_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offer_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($offer_ids) && (count($offer_ids) > 500)) {
            throw new \InvalidArgumentException('invalid value for $offer_ids when calling GetWarehouseStocksRequest., number of items must be less than or equal to 500.');
        }
        if (!is_null($offer_ids) && (count($offer_ids) < 1)) {
            throw new \InvalidArgumentException('invalid length for $offer_ids when calling GetWarehouseStocksRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['offer_ids'] = $offer_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


