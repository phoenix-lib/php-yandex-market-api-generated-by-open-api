<?php
/**
 * LaasApiTest
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Яндекс Маркета для продавцов
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LaasApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LaasApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteCampaignOffers
     *
     * Удаление товаров из ассортимента магазина.
     *
     */
    public function testDeleteCampaignOffers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOffers
     *
     * Удаление товаров из каталога.
     *
     */
    public function testDeleteOffers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateClosureDocumentsDetalizationReport
     *
     * Отчет по схождению с закрывающими документами.
     *
     */
    public function testGenerateClosureDocumentsDetalizationReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateClosureDocumentsReport
     *
     * Закрывающие документы.
     *
     */
    public function testGenerateClosureDocumentsReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateGoodsMovementReport
     *
     * Отчет по движению товаров.
     *
     */
    public function testGenerateGoodsMovementReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateStocksOnWarehousesReport
     *
     * Отчет по остаткам на складах.
     *
     */
    public function testGenerateStocksOnWarehousesReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedMarketplaceServicesReport
     *
     * Отчет по стоимости услуг.
     *
     */
    public function testGenerateUnitedMarketplaceServicesReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedReturnsReport
     *
     * Отчет по невыкупам и возвратам.
     *
     */
    public function testGenerateUnitedReturnsReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAuthTokenInfo
     *
     * Получение информации об авторизационном токене.
     *
     */
    public function testGetAuthTokenInfo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBusinessSettings
     *
     * Настройки кабинета.
     *
     */
    public function testGetBusinessSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaign
     *
     * Информация о магазине.
     *
     */
    public function testGetCampaign()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignOffers
     *
     * Информация о товарах, которые размещены в заданном магазине.
     *
     */
    public function testGetCampaignOffers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignSettings
     *
     * Настройки магазина.
     *
     */
    public function testGetCampaignSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaigns
     *
     * Список магазинов пользователя.
     *
     */
    public function testGetCampaigns()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesMaxSaleQuantum
     *
     * Лимит на установку кванта продажи и минимального количества товаров в заказе.
     *
     */
    public function testGetCategoriesMaxSaleQuantum()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesTree
     *
     * Дерево категорий.
     *
     */
    public function testGetCategoriesTree()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoryContentParameters
     *
     * Списки характеристик товаров по категориям.
     *
     */
    public function testGetCategoryContentParameters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDefaultPrices
     *
     * Просмотр цен на указанные товары во всех магазинах.
     *
     */
    public function testGetDefaultPrices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFulfillmentWarehouses
     *
     * Идентификаторы складов Маркета.
     *
     */
    public function testGetFulfillmentWarehouses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferCardsContentStatus
     *
     * Получение информации о заполненности карточек магазина.
     *
     */
    public function testGetOfferCardsContentStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferMappings
     *
     * Информация о товарах в каталоге.
     *
     */
    public function testGetOfferMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrder
     *
     * Информация об одном заказе.
     *
     */
    public function testGetOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrders
     *
     * Информация о нескольких заказах.
     *
     */
    public function testGetOrders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPricesByOfferIds
     *
     * Просмотр цен на указанные товары в конкретном магазине.
     *
     */
    public function testGetPricesByOfferIds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRegionsCodes
     *
     * Список допустимых кодов стран.
     *
     */
    public function testGetRegionsCodes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReportInfo
     *
     * Получение заданного отчета или документа.
     *
     */
    public function testGetReportInfo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturn
     *
     * Информация о невыкупе или возврате.
     *
     */
    public function testGetReturn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturns
     *
     * Список невыкупов и возвратов.
     *
     */
    public function testGetReturns()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getStocks
     *
     * Информация об остатках и оборачиваемости.
     *
     */
    public function testGetStocks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSupplyRequestDocuments
     *
     * Получение документов по заявке на поставку, вывоз или утилизацию.
     *
     */
    public function testGetSupplyRequestDocuments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSupplyRequestItems
     *
     * Получение товаров в заявке на поставку, вывоз или утилизацию.
     *
     */
    public function testGetSupplyRequestItems()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSupplyRequests
     *
     * Получение информации о заявках на поставку, вывоз и утилизацию.
     *
     */
    public function testGetSupplyRequests()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionChildren
     *
     * Информация о дочерних регионах.
     *
     */
    public function testSearchRegionChildren()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsById
     *
     * Информация о регионе.
     *
     */
    public function testSearchRegionsById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsByName
     *
     * Поиск регионов по их имени.
     *
     */
    public function testSearchRegionsByName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateBusinessPrices
     *
     * Установка цен на товары для всех магазинов.
     *
     */
    public function testUpdateBusinessPrices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCampaignOffers
     *
     * Изменение условий продажи товаров в магазине.
     *
     */
    public function testUpdateCampaignOffers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferContent
     *
     * Редактирование категорийных характеристик товара.
     *
     */
    public function testUpdateOfferContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferMappings
     *
     * Добавление товаров в каталог и изменение информации о них.
     *
     */
    public function testUpdateOfferMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatus
     *
     * Изменение статуса одного заказа.
     *
     */
    public function testUpdateOrderStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatuses
     *
     * Изменение статусов нескольких заказов.
     *
     */
    public function testUpdateOrderStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePrices
     *
     * Установка цен на товары в конкретном магазине.
     *
     */
    public function testUpdatePrices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
